# Generated by Django 5.0.4 on 2024-04-20 01:11

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("location", "0001_create_postgis_extensions"),
    ]

    operations = [
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "address_alphanumeric",
                    models.CharField(
                        help_text="The building number of the address: e.g., '1234' or '1234A'.",
                        max_length=16,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+[A-Z]?$", "Invalid house number."
                            )
                        ],
                        verbose_name="Building Number",
                    ),
                ),
                (
                    "predirabbrev",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="The direction prefix of the street: e.g., 'N' or 'NW'.",
                        max_length=2,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[NS]?[EW]?$", "Invalid direction prefix."
                            )
                        ],
                        verbose_name="Direction Prefix",
                    ),
                ),
                (
                    "streetname",
                    models.CharField(
                        help_text="The name of the street: e.g., 'Main' or 'Elm'.",
                        max_length=32,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-z\\s]+$", "Invalid street name."
                            )
                        ],
                        verbose_name="Street Name",
                    ),
                ),
                (
                    "streettypeabbrev",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="The type of the street: e.g., 'St' or 'Ave'.",
                        max_length=16,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-z]+\\.?$", "Invalid street type."
                            )
                        ],
                        verbose_name="Street Type",
                    ),
                ),
                (
                    "postdirabbrev",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="The direction suffix of the street: e.g., 'S' or 'SE'.",
                        max_length=2,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[NS]?[EW]?$", "Invalid direction suffix."
                            )
                        ],
                        verbose_name="Direction Suffix",
                    ),
                ),
                (
                    "internal",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="The internal address: e.g., 'Apt 1' or 'Suite 100'.",
                        max_length=32,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^(?:[A-Za-z]+\\.*\\s\\d+)$",
                                "Invalid internal address.",
                            )
                        ],
                        verbose_name="Internal",
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        help_text="The city of the address: e.g., 'Springfield' or 'Rivertown'.",
                        max_length=32,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-z\\s]+$", "Invalid city."
                            )
                        ],
                        verbose_name="City",
                    ),
                ),
                (
                    "stateabbrev",
                    models.CharField(
                        help_text="The state of the address: e.g., 'CA' or 'NY'.",
                        max_length=2,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Z]{2}$", "Invalid state."
                            )
                        ],
                        verbose_name="State",
                    ),
                ),
                (
                    "zip",
                    models.CharField(
                        help_text="The ZIP code of the address: e.g., '12345'.",
                        max_length=5,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d{5}$", "Invalid ZIP code."
                            )
                        ],
                        verbose_name="ZIP Code",
                    ),
                ),
                (
                    "zip4",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="The ZIP+4 code of the address: e.g., '6789'.",
                        max_length=4,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d{4}$", "Invalid ZIP+4 code."
                            )
                        ],
                        verbose_name="ZIP+4 Code",
                    ),
                ),
            ],
            options={
                "verbose_name": "Address",
                "verbose_name_plural": "Addresses",
                "ordering": [
                    "zip",
                    "stateabbrev",
                    "location",
                    "streetname",
                    "address_alphanumeric",
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="address",
            constraint=models.UniqueConstraint(
                fields=(
                    "address_alphanumeric",
                    "predirabbrev",
                    "streetname",
                    "streettypeabbrev",
                    "postdirabbrev",
                    "internal",
                    "location",
                    "stateabbrev",
                    "zip",
                    "zip4",
                ),
                name="unique_address",
                violation_error_message="The address already exists.",
            ),
        ),
    ]
